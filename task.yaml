# 진행할 작업 설정(배열이므로 여러 작업 설정 가능)
- task :
    input :
        type : file
        file :
            path : "D:/01_Project/golang/src/golang/LogParsing_regex/netflow_sample.txt"
            file_regex : config.regex
            # 파싱할 필드 지정이며, 
            # 첫번째 키는 사용자 지정 이름이며(태그명), 
            # 두번째 값은 찾을 정규식을 의미한다 
            # 정규식에 그룹이 없으면 찾은 라인의 전체가 value, 있으면 첫번째 그룹이 value가 된다 
            file_field_tag : 
                "${frame_index}" : "Frame ([0-9]+)"
                "${src_ip}" : "Source Address: ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)"
                "${dst_ip}" : "Destination Address: ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)"
                "${nf:version}" : "Version: ([0-9]+)"
                "${nf:sysuptime}" : "SysUptime: ([0-9]+)"
                "${nf:flowset}" : "FlowSet ([0-9]+)[ ]?$"
                "${nf:src_ip}" : "SrcAddr: ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)"
                "${nf:dst_ip}" : "DstAddr: ([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)"
                "${nf:protocol}" : "Protocol: ([\\w]+)"
                "${nf:src_port}" : "SrcPort: ([0-9]+)"
                "${nf:dst_port}" : "DstPort: ([0-9]+)"
                "${nf:if_in}" : "InputInt: ([0-9]+)"
                "${nf:if_out}" : "OutputInt: ([0-9]+)"
                "${nf:tcp_flags}"  : "TCP Flags: (0x[0-9a-f]+)"
                "${nf:bytes}" : "Octets: ([0-9]+)"
                "${nf:packets}" : "Packets: ([0-9]+)"
            # 한 set의 필드를 새로 구성할 시작 필드이다. 
            start_tag : "${frame_index}"
    output :
        type : file
        file :
            path : "D:/01_Project/golang/src/golang/LogParsing_regex/netflow_output.txt"
            # 저장 시 지정한 필드 형태로 라인별 저장할 포맷을 지정
            format : "${src_ip}|Z-${nf:src_ip},${nf:dst_ip},${nf:src_port},${nf:dst_port},${nf:protocol},${nf:tcp_flags},${nf:if_in},${nf:if_out},${nf:bytes},${nf:packets},0,0"